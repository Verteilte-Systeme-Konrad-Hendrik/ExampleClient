# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import orchestration_pb2 as orchestration__pb2


class ClientCommunicationStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.produceMessage = channel.unary_unary(
                '/Orchestration.ClientCommunication/produceMessage',
                request_serializer=orchestration__pb2.AbstractMessage.SerializeToString,
                response_deserializer=orchestration__pb2.RoundNumber.FromString,
                )
        self.publishMessage = channel.unary_unary(
                '/Orchestration.ClientCommunication/publishMessage',
                request_serializer=orchestration__pb2.AbstractMessage.SerializeToString,
                response_deserializer=orchestration__pb2.RoundNumber.FromString,
                )
        self.triggerRound = channel.unary_unary(
                '/Orchestration.ClientCommunication/triggerRound',
                request_serializer=orchestration__pb2.RoundNumber.SerializeToString,
                response_deserializer=orchestration__pb2.Empty.FromString,
                )
        self.pullMessageForRound = channel.unary_unary(
                '/Orchestration.ClientCommunication/pullMessageForRound',
                request_serializer=orchestration__pb2.RoundNumber.SerializeToString,
                response_deserializer=orchestration__pb2.QueueMessageBulk.FromString,
                )
        self.registerListener = channel.unary_unary(
                '/Orchestration.ClientCommunication/registerListener',
                request_serializer=orchestration__pb2.Empty.SerializeToString,
                response_deserializer=orchestration__pb2.ClientInfo.FromString,
                )


class ClientCommunicationServicer(object):
    """Missing associated documentation comment in .proto file."""

    def produceMessage(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def publishMessage(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def triggerRound(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def pullMessageForRound(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def registerListener(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ClientCommunicationServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'produceMessage': grpc.unary_unary_rpc_method_handler(
                    servicer.produceMessage,
                    request_deserializer=orchestration__pb2.AbstractMessage.FromString,
                    response_serializer=orchestration__pb2.RoundNumber.SerializeToString,
            ),
            'publishMessage': grpc.unary_unary_rpc_method_handler(
                    servicer.publishMessage,
                    request_deserializer=orchestration__pb2.AbstractMessage.FromString,
                    response_serializer=orchestration__pb2.RoundNumber.SerializeToString,
            ),
            'triggerRound': grpc.unary_unary_rpc_method_handler(
                    servicer.triggerRound,
                    request_deserializer=orchestration__pb2.RoundNumber.FromString,
                    response_serializer=orchestration__pb2.Empty.SerializeToString,
            ),
            'pullMessageForRound': grpc.unary_unary_rpc_method_handler(
                    servicer.pullMessageForRound,
                    request_deserializer=orchestration__pb2.RoundNumber.FromString,
                    response_serializer=orchestration__pb2.QueueMessageBulk.SerializeToString,
            ),
            'registerListener': grpc.unary_unary_rpc_method_handler(
                    servicer.registerListener,
                    request_deserializer=orchestration__pb2.Empty.FromString,
                    response_serializer=orchestration__pb2.ClientInfo.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'Orchestration.ClientCommunication', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class ClientCommunication(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def produceMessage(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Orchestration.ClientCommunication/produceMessage',
            orchestration__pb2.AbstractMessage.SerializeToString,
            orchestration__pb2.RoundNumber.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def publishMessage(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Orchestration.ClientCommunication/publishMessage',
            orchestration__pb2.AbstractMessage.SerializeToString,
            orchestration__pb2.RoundNumber.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def triggerRound(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Orchestration.ClientCommunication/triggerRound',
            orchestration__pb2.RoundNumber.SerializeToString,
            orchestration__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def pullMessageForRound(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Orchestration.ClientCommunication/pullMessageForRound',
            orchestration__pb2.RoundNumber.SerializeToString,
            orchestration__pb2.QueueMessageBulk.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def registerListener(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Orchestration.ClientCommunication/registerListener',
            orchestration__pb2.Empty.SerializeToString,
            orchestration__pb2.ClientInfo.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)


class ServerFacingClientStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.NotifyRoundFinished = channel.unary_unary(
                '/Orchestration.ServerFacingClient/NotifyRoundFinished',
                request_serializer=orchestration__pb2.RoundNumber.SerializeToString,
                response_deserializer=orchestration__pb2.Empty.FromString,
                )


class ServerFacingClientServicer(object):
    """Missing associated documentation comment in .proto file."""

    def NotifyRoundFinished(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_ServerFacingClientServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'NotifyRoundFinished': grpc.unary_unary_rpc_method_handler(
                    servicer.NotifyRoundFinished,
                    request_deserializer=orchestration__pb2.RoundNumber.FromString,
                    response_serializer=orchestration__pb2.Empty.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'Orchestration.ServerFacingClient', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class ServerFacingClient(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def NotifyRoundFinished(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/Orchestration.ServerFacingClient/NotifyRoundFinished',
            orchestration__pb2.RoundNumber.SerializeToString,
            orchestration__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
